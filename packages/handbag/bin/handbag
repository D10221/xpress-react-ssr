#!/usr/bin/env node

/**
 * @param {string} command process to run
 * @param {string[]} args commandline arguments
 * @returns {Promise<void>} promise
 */
const runCommand = (command, args) => {
  const cp = require("child_process");
  return new Promise((resolve, reject) => {
    const executedCommand = cp.spawn(command, args, {
      stdio: "inherit",
      shell: true
    });

    executedCommand.on("error", error => {
      reject(error);
    });

    executedCommand.on("exit", code => {
      if (code === 0) {
        resolve();
      } else {
        reject();
      }
    });
  });
};
/**
 * TODO:
 * @param {"/pages"} pages?
 * @param {"/server"} server?
 * @param {"start"} start?
 * @param {"."} project;
 * TODO:
 *   - add nodemon?
 *   - ??? 
 */
async function run(args) {
  try {
    await runCommand("webpack");
    var nodemon = require("nodemon");
    nodemon({
      ignore: [pages, "node_modules/**/node_modules"],
	  verbose: true,
	  execMap: {
		  js: `tsc -p ${project} && node ${start}`
	  },
      watch: ["server/"],
      env: {
        NODE_ENV: "development"
      },
      ext: "ts,tsx"
    });
  } catch (error) {
    console.error(error);
    process.exit(-1);
  }
}

run();
