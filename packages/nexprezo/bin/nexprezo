#!/usr/bin/env node
const args = require("minimist")(process.argv.slice(2));
const logger = require("@local/tiny-log").default(console.log.bind(console));
const env = require("dotenv");
const { readFileSync } = require("fs");
const { resolve } = require("path");
/** */
const run = (command, args) => {
  const cp = require("child_process");
  return new Promise((resolve, reject) => {
    const executedCommand = cp.spawn(command, args, {
      stdio: "inherit",
      shell: true
    });
    executedCommand.on("error", error => {
      reject(error);
    });
    executedCommand.on("exit", code => {
      if (code === 0) {
        resolve();
      } else {
        reject();
      }
    });
  });
};
const { PAGES } = env.parse(readFileSync(resolve(process.cwd(), ".env")));
/**
 *
 */
async function build() {
  logger.info("Building...");
  try {
    await run(`npx`, ["rimraf", "dist"]);
    await run(`npx`, ["tsc", "-p", "tsconfig.prod.json"]);
    await run(`npx`, ["webpack", "--mode=production"]);
    await run(`yarn`, ["workspace", `${PAGES}`, "build"]);
    return;
  } catch (error) {
    return logger.err(error);
  }
}
if (args.build) {
  return build();
}
if (args.start) {
  return require("../start");
}
logger.warn("Usage: \n --build --start");
