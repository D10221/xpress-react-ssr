#!/usr/bin/env node
const args = require("minimist")(process.argv.slice(2));
const logger = require("@local/tiny-log").default(console.log.bind(console));
const env = require("dotenv");
const { readFileSync } = require("fs");
const { resolve } = require("path");
const cwd = process.cwd();
const pkg = require(resolve(cwd, "package.json"));
/**
 *
 * @param cmd {string}
 * @param args {string[]}
 */
const run = (cmd, args) => {
  const cp = require("child_process");
  return new Promise((resolve, reject) => {
    const exec = cp.spawn(cmd, args, {
      stdio: "inherit",
      shell: true
    });
    exec.on("error", error => {
      reject(error);
    });
    exec.on("exit", code => {
      if (code === 0) {
        resolve();
      } else {
        reject();
      }
    });
  });
};
/**
 *
 */
async function build() {
  logger.info("Building...");
  try {
    const PAGES =
      args.pages ||
      process.env.PAGES ||
      env.parse(readFileSync(resolve(cwd, ".env"))).PAGES;
    if (!PAGES) throw new Error("No $PAGES!");
    await run(`npx`, ["rimraf", "dist"]);
    await run(`npx`, ["tsc", "-p", "tsconfig.prod.json"]);
    await run(`npx`, ["webpack", "--mode=production"]);
    await run(`yarn`, ["workspace", `${PAGES}`, "build"]);
    return;
  } catch (error) {
    return logger.err(error);
  }
}
try {
  if (args.build) {
    return build();
  }
  if (args.start) {
    logger.info("Starting %s ...", pkg.name);
    if (!pkg.main) throw new Error('Missing "main" property in package.json ');
    process.env.NODE_ENV = "production";
    return require(resolve(cwd, pkg.main));
  }
  logger.warn(`
  Usage: \n 
    --build "builds 'production'"
    --start "starts 'production'"
    --pages [optional] 
    \t"package name where to get pages from 
    \toverrides $PAGES"   
  `);
} catch (error) {
  logger.err(error);
  return process.exit(-1);
}
